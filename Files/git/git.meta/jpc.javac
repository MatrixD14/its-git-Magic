class git extends Component { //[I-S]LN=0;[I-E]
  @Order(idx = -2) //[I-S]LN=1;[I-E]
  public String NameGitIsRepository; // "name do usuario do github/ nome do repositorio que sera alocado os arquivo-->  usuario/repositorio" //[I-S]LN=2;[I-E]
 //[I-S]LN=3;[I-E]
  @Order(idx = -1) //[I-S]LN=4;[I-E]
  public String path; // "caminho da pasta a pasta /Files/ e a pasta raiz que poderar ser enviado para o github " //[I-S]LN=5;[I-E]
 //[I-S]LN=6;[I-E]
  @Order(idx = 1) //[I-S]LN=7;[I-E]
  public String BranchOrCommitRecovery = "main"; // / branch e uma linha paralela do projeto que muda com o tempo //[I-S]LN=8;[I-E]
  /// CommitRecovery usa o codigo sha para voltar no tempo //[I-S]LN=9;[I-E]
 //[I-S]LN=10;[I-E]
  @Order(idx = 2) //[I-S]LN=11;[I-E]
  public String Commit = "comito"; // "etiqueta que marca o tempo de modificação do arquivo que quanda o sha" //[I-S]LN=12;[I-E]
 //[I-S]LN=13;[I-E]
  @Order(idx = 3) //[I-S]LN=14;[I-E]
  public String token; // "codigo toke do github" //[I-S]LN=15;[I-E]
 //[I-S]LN=16;[I-E]
  private String Dir; //[I-S]LN=17;[I-E]
 //[I-S]LN=18;[I-E]
  PopupDialog mssg; //[I-S]LN=19;[I-E]
  int onoff = 0; //[I-S]LN=20;[I-E]
 //[I-S]LN=21;[I-E]
  private gitClone gitclone = new gitClone(); //[I-S]LN=22;[I-E]
  private gitPush gitpush = new gitPush(); //[I-S]LN=23;[I-E]
  private gitPushMult gitpushmult = new gitPushMult(); //[I-S]LN=24;[I-E]
  private gitCloneMult gitclonemult = new gitCloneMult(); //[I-S]LN=25;[I-E]
 //[I-S]LN=26;[I-E]
  @Order(idx = 0) //[I-S]LN=27;[I-E]
  public PropertiesButton DownLoad = //[I-S]LN=28;[I-E]
      new PropertiesButton( //[I-S]LN=29;[I-E]
          new PropertiesButtonListener() { //[I-S]LN=30;[I-E]
            void onClicked() { //[I-S]LN=31;[I-E]
              onoff = 2; //[I-S]LN=32;[I-E]
              Alert(); //[I-S]LN=33;[I-E]
            } //[I-S]LN=34;[I-E]
          }); //[I-S]LN=35;[I-E]
 //[I-S]LN=36;[I-E]
  @Order(idx = 4) //[I-S]LN=37;[I-E]
  public PropertiesButton UpLoad = //[I-S]LN=38;[I-E]
      new PropertiesButton( //[I-S]LN=39;[I-E]
          new PropertiesButtonListener() { //[I-S]LN=40;[I-E]
            void onClicked() { //[I-S]LN=41;[I-E]
              onoff = 1; //[I-S]LN=42;[I-E]
              Alert(); //[I-S]LN=43;[I-E]
            } //[I-S]LN=44;[I-E]
          }); //[I-S]LN=45;[I-E]
 //[I-S]LN=46;[I-E]
  private void Alert() { //[I-S]LN=47;[I-E]
    mssg = new PopupDialog(PopupDialog.ALERT, "voce tem certesa quer envia/baixa " + path, ""); //[I-S]LN=48;[I-E]
    mssg.setConfirmButton( //[I-S]LN=49;[I-E]
        "confirm", //[I-S]LN=50;[I-E]
        new PopupDialogListener() { //[I-S]LN=51;[I-E]
          public void onClicked() { //[I-S]LN=52;[I-E]
            if (onoff == 1) UpLoad(); //[I-S]LN=53;[I-E]
            if (onoff == 2) DownLoad(); //[I-S]LN=54;[I-E]
            onoff = 0; //[I-S]LN=55;[I-E]
 //[I-S]LN=56;[I-E]
            mssg.dismiss(); //[I-S]LN=57;[I-E]
          }  //[I-S]LN=58;[I-E]
        }); //[I-S]LN=59;[I-E]
    mssg.setCancelButton( //[I-S]LN=60;[I-E]
        "cancel", //[I-S]LN=61;[I-E]
        new PopupDialogListener() { //[I-S]LN=62;[I-E]
          public void onClicked() { //[I-S]LN=63;[I-E]
 //[I-S]LN=64;[I-E]
            mssg.dismiss(); //[I-S]LN=65;[I-E]
          } //[I-S]LN=66;[I-E]
        }); //[I-S]LN=67;[I-E]
    mssg.show(); //[I-S]LN=68;[I-E]
    // return false; //[I-S]LN=69;[I-E]
  } //[I-S]LN=70;[I-E]
 //[I-S]LN=71;[I-E]
  public void DownLoad() { //[I-S]LN=72;[I-E]
    String DownloadUrl = null; //[I-S]LN=73;[I-E]
    boolean onoffFile = false; //[I-S]LN=74;[I-E]
    if (path.contains(".")) onoffFile = true; //[I-S]LN=75;[I-E]
    if (onoffFile && verifica(false, false)) { //[I-S]LN=76;[I-E]
      if ((BranchOrCommitRecovery == null || BranchOrCommitRecovery.length() < 40) && verifica(false, true)) BranchOrCommitRecovery = "main"; //[I-S]LN=77;[I-E]
      else Console.log("recuperando file no tempo"); //[I-S]LN=78;[I-E]
 //[I-S]LN=79;[I-E]
      DownloadUrl = "https://raw.githubusercontent.com/" + NameGitIsRepository + "/" + BranchOrCommitRecovery + "/Files/" + path; //[I-S]LN=80;[I-E]
      gitclone.GitClone(DownloadUrl, Dir); //[I-S]LN=81;[I-E]
 //[I-S]LN=82;[I-E]
      StringBuilder InforDate = new StringBuilder(); //[I-S]LN=83;[I-E]
      InforDate.append("{\n \"pasth\": \"").append(Dir).append("\",\n \"NameFile\": \"").append(path).append("\",\n \"Link\": \"").append(DownloadUrl).append("\"\n}"); //[I-S]LN=84;[I-E]
      Console.log(InforDate.toString()); //[I-S]LN=85;[I-E]
 //[I-S]LN=86;[I-E]
    } else if (verifica(true, false)) { //[I-S]LN=87;[I-E]
      DownloadUrl = "https://api.github.com/repos/" + NameGitIsRepository + "/contents/Files/" + path + "?ref=main"; //[I-S]LN=88;[I-E]
      File dir = new File(Dir); //[I-S]LN=89;[I-E]
      gitclonemult.gitPasthAll(gitclone, dir, DownloadUrl, token); //[I-S]LN=90;[I-E]
    } //[I-S]LN=91;[I-E]
  } //[I-S]LN=92;[I-E]
 //[I-S]LN=93;[I-E]
  public void UpLoad() { //[I-S]LN=94;[I-E]
    boolean onoffFile = false; //[I-S]LN=95;[I-E]
    if (path.contains(".")) onoffFile = true; //[I-S]LN=96;[I-E]
    if (!verifica(true, true)) return; //[I-S]LN=97;[I-E]
    if (onoffFile) { //[I-S]LN=98;[I-E]
      String API_Url = "https://api.github.com/repos/" + NameGitIsRepository + "/contents/Files/" + path + "?ref=main"; //[I-S]LN=99;[I-E]
      // busca o sha do file //[I-S]LN=100;[I-E]
 //[I-S]LN=101;[I-E]
      String shas = gitpush.getSha(API_Url, token); //[I-S]LN=102;[I-E]
      gitpush.GitPush(API_Url, Commit, Dir, token, shas); //[I-S]LN=103;[I-E]
 //[I-S]LN=104;[I-E]
      Console.log(!shas.isEmpty() ? "update" : "create"); //[I-S]LN=105;[I-E]
      Console.log("Link: " + API_Url); //[I-S]LN=106;[I-E]
    } else { //[I-S]LN=107;[I-E]
      File dir = new File(Dir); //[I-S]LN=108;[I-E]
      if (dir == null || !dir.exists()) return; //[I-S]LN=109;[I-E]
 //[I-S]LN=110;[I-E]
      // "lista todos oa file que existe" //[I-S]LN=111;[I-E]
      gitpushmult.UpVariaPasth(gitpush, dir, dir.getAbsolutePath() + "", NameGitIsRepository, Commit, path, token); //[I-S]LN=112;[I-E]
    } //[I-S]LN=113;[I-E]
  } //[I-S]LN=114;[I-E]
 //[I-S]LN=115;[I-E]
  public boolean verifica(boolean Token, boolean pont) { //[I-S]LN=116;[I-E]
    if (!NameGitIsRepository.contains("/") || NameGitIsRepository.isEmpty()) { //[I-S]LN=117;[I-E]
      Toast.showText("esta errado o link do \"nome do usuario do git\" / nome do repositorio", 1); //[I-S]LN=118;[I-E]
      return false; //[I-S]LN=119;[I-E]
    } //[I-S]LN=120;[I-E]
    if (path == null || path.isEmpty() || (pont && !new File(Directories.getProjectFolder() + "/Files/" + path).exists())) { //[I-S]LN=121;[I-E]
      Toast.showText("caminho para o arquivo esta faltando ou errado", 1); //[I-S]LN=122;[I-E]
      return false; //[I-S]LN=123;[I-E]
    } //[I-S]LN=124;[I-E]
    if (Token && (token == null || token.length() < 20)) { //[I-S]LN=125;[I-E]
      Toast.showText("o toke esta vazio ou faltando", 1); //[I-S]LN=126;[I-E]
      return false; //[I-S]LN=127;[I-E]
    } //[I-S]LN=128;[I-E]
 //[I-S]LN=129;[I-E]
    Dir = Directories.getProjectFolder() + "Files/" + path; //[I-S]LN=130;[I-E]
    return true; //[I-S]LN=131;[I-E]
  } //[I-S]LN=132;[I-E]
} //[I-S]LN=133;[I-E]