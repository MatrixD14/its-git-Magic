package JAVARuntime;

import android.view.*; //[I-S]LN=0;[I-E]
import android.widget.*; //[I-S]LN=1;[I-E]
import androidx.constraintlayout.widget.*; //[I-S]LN=2;[I-E]
import java.util.*;
import java.util.concurrent.*;
import java.util.concurrent.atomic.*;
import java.util.concurrent.locks.*;
import java.util.function.*;
import java.util.regex.*;
import java.util.stream.*;
import java.util.zip.*;
import java.text.*;
import java.net.*;
import java.math.*;
import java.io.*;
import java.nio.*;
import java.time.*;
import java.time.chrono.*;
import java.time.format.*;
import java.time.temporal.*;
import java.time.zone.*;



public class _JContainer{}

//C-R:gitPushMult
class gitPushMult { //[I-S]LN=0;[I-E]
  private gitPush gitpush; //[I-S]LN=1;[I-E]
  private String base, linkNamePasth, Commit, pasth, toke; //[I-S]LN=2;[I-E]
  private File dir; //[I-S]LN=3;[I-E]
  public void UpVariaPasth(gitPush gitpush, File dir, String base, String linkNamePasth, String Commit, String pasth, String toke) { //[I-S]LN=4;[I-E]
    this.gitpush = gitpush; //[I-S]LN=5;[I-E]
    this.base = base; //[I-S]LN=6;[I-E]
    this.linkNamePasth = linkNamePasth; //[I-S]LN=7;[I-E]
    this.Commit = Commit; //[I-S]LN=8;[I-E]
    this.pasth = pasth; //[I-S]LN=9;[I-E]
    this.toke = toke; //[I-S]LN=10;[I-E]
    this.dir = dir; //[I-S]LN=11;[I-E]
     //[I-S]LN=12;[I-E]
    new AsyncTask( //[I-S]LN=13;[I-E]
        new AsyncRunnable() { //[I-S]LN=14;[I-E]
          public Object onBackground(Object input) { //[I-S]LN=15;[I-E]
            processFile(); //[I-S]LN=16;[I-E]
            return null; //[I-S]LN=17;[I-E]
          } //[I-S]LN=18;[I-E]
 //[I-S]LN=19;[I-E]
          public void onEngine(Object result) { //[I-S]LN=20;[I-E]
            Console.log("upload Ended"); //[I-S]LN=21;[I-E]
            Toast.showText("UpLoad the End",1); //[I-S]LN=22;[I-E]
          } //[I-S]LN=23;[I-E]
        }); //[I-S]LN=24;[I-E]
  } //[I-S]LN=25;[I-E]
 //[I-S]LN=26;[I-E]
  private void busca(File dir, List<File> resul) { //[I-S]LN=27;[I-E]
    File[] file = dir.listFiles(); //[I-S]LN=28;[I-E]
    if (file == null) return; //[I-S]LN=29;[I-E]
    for (File f : file) { //[I-S]LN=30;[I-E]
      if (f.isDirectory()) busca(f, resul); //[I-S]LN=31;[I-E]
      else resul.add(f); //[I-S]LN=32;[I-E]
    } //[I-S]LN=33;[I-E]
  } //[I-S]LN=34;[I-E]
 //[I-S]LN=35;[I-E]
  private File[] listFile(File dir) { //[I-S]LN=36;[I-E]
    List<File> resul = new ArrayList<File>(); //[I-S]LN=37;[I-E]
    busca(dir, resul); //[I-S]LN=38;[I-E]
    return resul.toArray(new File[0]); //[I-S]LN=39;[I-E]
  } //[I-S]LN=40;[I-E]
 //[I-S]LN=41;[I-E]
  private void processFile() { //[I-S]LN=42;[I-E]
    File[] file = listFile(dir); //[I-S]LN=43;[I-E]
    if (file == null) return; //[I-S]LN=44;[I-E]
    for (int i = 0; i < file.length; i++) { //[I-S]LN=45;[I-E]
      File f = file[i]; //[I-S]LN=46;[I-E]
      if (f.isDirectory()) continue; //[I-S]LN=47;[I-E]
      if (!f.getName().startsWith(".")) { //[I-S]LN=48;[I-E]
        String name = f.getAbsolutePath().replace(base, ""); //[I-S]LN=49;[I-E]
        String cominho = f.getAbsolutePath(); //[I-S]LN=50;[I-E]
        String API_Url = "https://api.github.com/repos/" + linkNamePasth + "/contents/Files/" + pasth + name + "?ref=main"; //[I-S]LN=51;[I-E]
 //[I-S]LN=52;[I-E]
        // busca o sha do file //[I-S]LN=53;[I-E]
 //[I-S]LN=54;[I-E]
        String shas = gitpush.getSha(API_Url, toke); //[I-S]LN=55;[I-E]
        gitpush.GitPush(API_Url, Commit, cominho, toke, shas); //[I-S]LN=56;[I-E]
 //[I-S]LN=57;[I-E]
        Console.log(!shas.isEmpty() ? "update" : "create"); //[I-S]LN=58;[I-E]
        Console.log("Link: " + API_Url); //[I-S]LN=59;[I-E]
      } //[I-S]LN=60;[I-E]
    }  //[I-S]LN=61;[I-E]
  } //[I-S]LN=62;[I-E]
} //[I-S]LN=63;[I-E]
//C-R:gitPush
class gitPush { //[I-S]LN=0;[I-E]
  public void GitPush(String link, String menssage, String pasth, String token, String sha) { //[I-S]LN=1;[I-E]
    try { //[I-S]LN=2;[I-E]
      byte[] date = readFile(pasth); //[I-S]LN=3;[I-E]
      String encode = Base64.getEncoder().encodeToString(date); //[I-S]LN=4;[I-E]
 //[I-S]LN=5;[I-E]
      // json que sera enviado para api.github //[I-S]LN=6;[I-E]
 //[I-S]LN=7;[I-E]
      StringBuilder json = new StringBuilder(); //[I-S]LN=8;[I-E]
      json.append("{\n  \"message\": \"").append(menssage).append("\",\n  \"content\": \"").append(encode).append("\",\n  \"branch\": \"main\""); //[I-S]LN=9;[I-E]
      if (sha != null && !sha.isEmpty()) json.append(",\n  \"sha\": \"").append(sha).append("\""); //[I-S]LN=10;[I-E]
      json.append("\n}"); //[I-S]LN=11;[I-E]
      Console.log("{\n  \"message\": \""+menssage+"\",\n  \"branch\": \"main\",\n  "+((sha != null && !sha.isEmpty())?"\"sha\": \""+sha:"")+"\"\n}"); //[I-S]LN=12;[I-E]
 //[I-S]LN=13;[I-E]
      // connect com o github //[I-S]LN=14;[I-E]
 //[I-S]LN=15;[I-E]
      HttpURLConnection com = (HttpURLConnection) new URL(link).openConnection(); //[I-S]LN=16;[I-E]
      com.setRequestMethod("PUT"); //[I-S]LN=17;[I-E]
      com.setDoOutput(true); //[I-S]LN=18;[I-E]
      com.setRequestProperty("Authorization", "token " + token); //[I-S]LN=19;[I-E]
      com.setRequestProperty("Content-Type", "application/json"); //[I-S]LN=20;[I-E]
 //[I-S]LN=21;[I-E]
      OutputStream output = com.getOutputStream(); //[I-S]LN=22;[I-E]
      output.write(json.toString().getBytes("UTF-8")); //[I-S]LN=23;[I-E]
      output.flush(); //[I-S]LN=24;[I-E]
      output.close(); //[I-S]LN=25;[I-E]
 //[I-S]LN=26;[I-E]
      /// vierifica se teve algum erro ao conectar como github //[I-S]LN=27;[I-E]
 //[I-S]LN=28;[I-E]
      int menss = com.getResponseCode(); //[I-S]LN=29;[I-E]
      Console.log(menss == 201 || menss == 200 ? "file enviado sucess" : "erro em algum folder"); //[I-S]LN=30;[I-E]
 //[I-S]LN=31;[I-E]
      InputStream input = (menss >= 400) ? com.getErrorStream() : com.getInputStream(); //[I-S]LN=32;[I-E]
      BufferedReader reader = new BufferedReader(new InputStreamReader(input)); //[I-S]LN=33;[I-E]
      StringBuilder result = new StringBuilder(); //[I-S]LN=34;[I-E]
      String line; //[I-S]LN=35;[I-E]
      while ((line = reader.readLine()) != null) result.append(line); //[I-S]LN=36;[I-E]
      Console.log("\nreposta: " + result.toString()); //[I-S]LN=37;[I-E]
      input.close(); //[I-S]LN=38;[I-E]
    } catch (Exception e) { //[I-S]LN=39;[I-E]
      Console.log(e); //[I-S]LN=40;[I-E]
    } //[I-S]LN=41;[I-E]
  } //[I-S]LN=42;[I-E]
 //[I-S]LN=43;[I-E]
  /// função que ve o tamanho do file que sera enviado para git para não manda faltando em byte //[I-S]LN=44;[I-E]
 //[I-S]LN=45;[I-E]
  public byte[] readFile(String pasth) { //[I-S]LN=46;[I-E]
    try { //[I-S]LN=47;[I-E]
      FileInputStream fs = new FileInputStream(pasth); //[I-S]LN=48;[I-E]
      ByteArrayOutputStream buffer = new ByteArrayOutputStream(); //[I-S]LN=49;[I-E]
      byte[] date = new byte[1024]; //[I-S]LN=50;[I-E]
      int read; //[I-S]LN=51;[I-E]
      while ((read = fs.read(date)) != -1) buffer.write(date, 0, read); //[I-S]LN=52;[I-E]
      fs.close(); //[I-S]LN=53;[I-E]
      return buffer.toByteArray(); //[I-S]LN=54;[I-E]
    } catch (Exception e) { //[I-S]LN=55;[I-E]
      Console.log(e); //[I-S]LN=56;[I-E]
    } //[I-S]LN=57;[I-E]
    return null; //[I-S]LN=58;[I-E]
  } //[I-S]LN=59;[I-E]
 //[I-S]LN=60;[I-E]
  /// funcão vai busca no json da api.github onde esta o "sha" do file existe no github //[I-S]LN=61;[I-E]
 //[I-S]LN=62;[I-E]
  public String getSha(String link, String token) { //[I-S]LN=63;[I-E]
    try { //[I-S]LN=64;[I-E]
      URL url = new URL(link); //[I-S]LN=65;[I-E]
 //[I-S]LN=66;[I-E]
      HttpURLConnection com = (HttpURLConnection) url.openConnection(); //[I-S]LN=67;[I-E]
      com.setRequestMethod("GET"); //[I-S]LN=68;[I-E]
      com.setRequestProperty("Authorization", "token " + token); //[I-S]LN=69;[I-E]
      com.setRequestProperty("Accept", "application/vnd.github.v3+json"); //[I-S]LN=70;[I-E]
 //[I-S]LN=71;[I-E]
      int menss = com.getResponseCode(); //[I-S]LN=72;[I-E]
      InputStream input = (menss >= 400) ? com.getErrorStream() : com.getInputStream(); //[I-S]LN=73;[I-E]
      BufferedReader reader = new BufferedReader(new InputStreamReader(input)); //[I-S]LN=74;[I-E]
      StringBuilder result = new StringBuilder(); //[I-S]LN=75;[I-E]
      String line; //[I-S]LN=76;[I-E]
      while ((line = reader.readLine()) != null) result.append(line); //[I-S]LN=77;[I-E]
      input.close(); //[I-S]LN=78;[I-E]
 //[I-S]LN=79;[I-E]
      GitPushJson json = (GitPushJson) Json.fromJson(result.toString(), GitPushJson.class, true); //[I-S]LN=80;[I-E]
 //[I-S]LN=81;[I-E]
      if (json != null && json.sha != null) return json.sha; //[I-S]LN=82;[I-E]
      else Console.log("falho o sha"); //[I-S]LN=83;[I-E]
      input.close(); //[I-S]LN=84;[I-E]
    } catch (Exception e) { //[I-S]LN=85;[I-E]
      Console.log(e); //[I-S]LN=86;[I-E]
    } //[I-S]LN=87;[I-E]
    return ""; //[I-S]LN=88;[I-E]
  } //[I-S]LN=89;[I-E]
 //[I-S]LN=90;[I-E]
  public static class GitPushJson { //[I-S]LN=91;[I-E]
    public String sha; //[I-S]LN=92;[I-E]
  }  //[I-S]LN=93;[I-E]
} //[I-S]LN=94;[I-E]
//C-R:gitCloneMult
class gitCloneMult { //[I-S]LN=0;[I-E]
  private gitClone gitclone; //[I-S]LN=1;[I-E]
  private String link, token; //[I-S]LN=2;[I-E]
  private File Dir; //[I-S]LN=3;[I-E]
 //[I-S]LN=4;[I-E]
  public void gitPasthAll(gitClone gitclone, File Dir, String link, String token) { //[I-S]LN=5;[I-E]
    this.Dir = Dir; //[I-S]LN=6;[I-E]
    this.gitclone = gitclone; //[I-S]LN=7;[I-E]
    this.link = link; //[I-S]LN=8;[I-E]
    this.token = token; //[I-S]LN=9;[I-E]
    new AsyncTask( //[I-S]LN=10;[I-E]
        new AsyncRunnable() { //[I-S]LN=11;[I-E]
          public Object onBackground(Object input) { //[I-S]LN=12;[I-E]
            processFile(); //[I-S]LN=13;[I-E]
            return null; //[I-S]LN=14;[I-E]
          } //[I-S]LN=15;[I-E]
 //[I-S]LN=16;[I-E]
          public void onEngine(Object result) { //[I-S]LN=17;[I-E]
            Console.log("Download finalizado"); //[I-S]LN=18;[I-E]
            Toast.showText("DownLoad the End", 1); //[I-S]LN=19;[I-E]
          } //[I-S]LN=20;[I-E]
        }); //[I-S]LN=21;[I-E]
  } //[I-S]LN=22;[I-E]
 //[I-S]LN=23;[I-E]
  public void processFile() { //[I-S]LN=24;[I-E]
    try { //[I-S]LN=25;[I-E]
      HttpURLConnection com = (HttpURLConnection) new URL(link).openConnection(); //[I-S]LN=26;[I-E]
      com.setRequestMethod("GET"); //[I-S]LN=27;[I-E]
      com.setRequestProperty("Authorization", "token " + token); //[I-S]LN=28;[I-E]
      com.setRequestProperty("Accept", "application/vnd.github.v3+json"); //[I-S]LN=29;[I-E]
 //[I-S]LN=30;[I-E]
      int menss = com.getResponseCode(); //[I-S]LN=31;[I-E]
      InputStream input = (menss >= 400) ? com.getErrorStream() : com.getInputStream(); //[I-S]LN=32;[I-E]
      BufferedReader reader = new BufferedReader(new InputStreamReader(input)); //[I-S]LN=33;[I-E]
      StringBuilder result = new StringBuilder(); //[I-S]LN=34;[I-E]
      String line; //[I-S]LN=35;[I-E]
      while ((line = reader.readLine()) != null) result.append(line); //[I-S]LN=36;[I-E]
      input.close(); //[I-S]LN=37;[I-E]
      com.disconnect(); //[I-S]LN=38;[I-E]
 //[I-S]LN=39;[I-E]
      FileJson(result.toString(),""); //[I-S]LN=40;[I-E]
    } catch (IOException e) { //[I-S]LN=41;[I-E]
      Console.log("erro no json: " + e.getMessage()); //[I-S]LN=42;[I-E]
    } //[I-S]LN=43;[I-E]
  } //[I-S]LN=44;[I-E]
 //[I-S]LN=45;[I-E]
  public void FileJson(String jsons, String subPath) { //[I-S]LN=46;[I-E]
    try { //[I-S]LN=47;[I-E]
      GitCloneJson[] file = (GitCloneJson[]) Json.fromJson(jsons, GitCloneJson[].class, true); //[I-S]LN=48;[I-E]
      for (GitCloneJson json : file) { //[I-S]LN=49;[I-E]
        if (json.type.equals("file")) { //[I-S]LN=50;[I-E]
          File destino = new File(Dir, subPath + "/" + json.name); //[I-S]LN=51;[I-E]
          gitclone.GitClone(json.download_url, destino.getAbsolutePath()); //[I-S]LN=52;[I-E]
          StringBuilder inforData = new StringBuilder(); //[I-S]LN=53;[I-E]
          inforData.append("{\n \"Path\" : \"").append(Dir).append("\",\n \"File\" : \"").append(destino.getAbsolutePath()).append("\",\n \"Link\" : \"").append(json.url).append("\"\n}"); //[I-S]LN=54;[I-E]
          Console.log(inforData.toString()); //[I-S]LN=55;[I-E]
          Console.log(destino.exists()?"já existe sobrescrevel":""); //[I-S]LN=56;[I-E]
           //[I-S]LN=57;[I-E]
        } else if (json.type.equals("dir") || json.type.equals("directory")) { //[I-S]LN=58;[I-E]
            String pathAll = subPath + "/" + json.name; //[I-S]LN=59;[I-E]
            File path = new File(Dir, pathAll); //[I-S]LN=60;[I-E]
            if(!path.exists()) path.mkdirs(); //[I-S]LN=61;[I-E]
             //[I-S]LN=62;[I-E]
          try { //[I-S]LN=63;[I-E]
            HttpURLConnection com = (HttpURLConnection) new URL(json.url).openConnection(); //[I-S]LN=64;[I-E]
            com.setRequestMethod("GET"); //[I-S]LN=65;[I-E]
            com.setRequestProperty("Authorization", "token " + token); //[I-S]LN=66;[I-E]
            com.setRequestProperty("Accept", "application/vnd.github.v3+json"); //[I-S]LN=67;[I-E]
 //[I-S]LN=68;[I-E]
            int menss = com.getResponseCode(); //[I-S]LN=69;[I-E]
            InputStream input = (menss >= 400) ? com.getErrorStream() : com.getInputStream(); //[I-S]LN=70;[I-E]
            BufferedReader reader = new BufferedReader(new InputStreamReader(input)); //[I-S]LN=71;[I-E]
            StringBuilder result = new StringBuilder(); //[I-S]LN=72;[I-E]
            String line; //[I-S]LN=73;[I-E]
            while ((line = reader.readLine()) != null) result.append(line); //[I-S]LN=74;[I-E]
            input.close(); //[I-S]LN=75;[I-E]
            com.disconnect(); //[I-S]LN=76;[I-E]
 //[I-S]LN=77;[I-E]
            FileJson(result.toString(),pathAll); //[I-S]LN=78;[I-E]
          } catch (Exception e) { //[I-S]LN=79;[I-E]
              Console.log("erro ao acessar a path: "+subPath+ " -->" + e.getMessage()); //[I-S]LN=80;[I-E]
          }  //[I-S]LN=81;[I-E]
        } //[I-S]LN=82;[I-E]
      } //[I-S]LN=83;[I-E]
    } catch (Exception e) { //[I-S]LN=84;[I-E]
      Console.log("erro no Download file: " + e.getMessage()); //[I-S]LN=85;[I-E]
    } //[I-S]LN=86;[I-E]
  } //[I-S]LN=87;[I-E]
 //[I-S]LN=88;[I-E]
  public static class GitCloneJson { //[I-S]LN=89;[I-E]
    public String name; //[I-S]LN=90;[I-E]
    public String url; //[I-S]LN=91;[I-E]
    public String download_url; //[I-S]LN=92;[I-E]
    public String type; //[I-S]LN=93;[I-E]
    public String sha; //[I-S]LN=94;[I-E]
  } //[I-S]LN=95;[I-E]
} //[I-S]LN=96;[I-E]
//C-R:gitClone
class gitClone { //[I-S]LN=0;[I-E]
 //[I-S]LN=1;[I-E]
  public void GitClone(String link, String path) { //[I-S]LN=2;[I-E]
    InputStream in = null; //[I-S]LN=3;[I-E]
    BufferedInputStream bs = null; //[I-S]LN=4;[I-E]
    FileOutputStream fs = null; //[I-S]LN=5;[I-E]
    File addPasth = new File(path); //[I-S]LN=6;[I-E]
    File paretDir = addPasth.getParentFile(); //[I-S]LN=7;[I-E]
    if (paretDir != null && !paretDir.exists()) paretDir.mkdirs(); //[I-S]LN=8;[I-E]
 //[I-S]LN=9;[I-E]
    try { //[I-S]LN=10;[I-E]
      HttpURLConnection com = (HttpURLConnection) new URL(link).openConnection(); //[I-S]LN=11;[I-E]
      if (com.getResponseCode() != 200) { //[I-S]LN=12;[I-E]
          Console.log("erro no Http: "+ com.getResponseCode()); //[I-S]LN=13;[I-E]
        return; //[I-S]LN=14;[I-E]
      }  //[I-S]LN=15;[I-E]
      in = com.getInputStream(); //[I-S]LN=16;[I-E]
      bs = new BufferedInputStream(in); //[I-S]LN=17;[I-E]
      fs = new FileOutputStream(addPasth); //[I-S]LN=18;[I-E]
      byte[] date = new byte[1024]; //[I-S]LN=19;[I-E]
      int count; //[I-S]LN=20;[I-E]
      while ((count = bs.read(date, 0, 1024)) != -1) { //[I-S]LN=21;[I-E]
        fs.write(date, 0, count); //[I-S]LN=22;[I-E]
      } //[I-S]LN=23;[I-E]
      if (addPasth.length() == 0) Console.log("falho file void or no exists"); //[I-S]LN=24;[I-E]
    } catch (IOException e) { //[I-S]LN=25;[I-E]
      Console.log("erro no Download file: " + e.getMessage()); //[I-S]LN=26;[I-E]
    } finally { //[I-S]LN=27;[I-E]
      try { //[I-S]LN=28;[I-E]
        if (fs != null) fs.close(); //[I-S]LN=29;[I-E]
      } catch (IOException e) { //[I-S]LN=30;[I-E]
        Console.log("erro no FileOutputStream: " + e.getMessage()); //[I-S]LN=31;[I-E]
      } //[I-S]LN=32;[I-E]
      try { //[I-S]LN=33;[I-E]
        if (bs != null) bs.close(); //[I-S]LN=34;[I-E]
      } catch (IOException e) { //[I-S]LN=35;[I-E]
        Console.log("erro no BufferedInputStream: " + e.getMessage()); //[I-S]LN=36;[I-E]
      } //[I-S]LN=37;[I-E]
      try { //[I-S]LN=38;[I-E]
        if (in != null) in.close(); //[I-S]LN=39;[I-E]
      } catch (IOException e) { //[I-S]LN=40;[I-E]
        Console.log("erro no InputStream: " + e.getMessage()); //[I-S]LN=41;[I-E]
      } //[I-S]LN=42;[I-E]
    } //[I-S]LN=43;[I-E]
  } //[I-S]LN=44;[I-E]
} //[I-S]LN=45;[I-E]
//C-R:git
class git extends Component { //[I-S]LN=0;[I-E]
  @Order(idx = -2) //[I-S]LN=1;[I-E]
  public String NameGitIsRepository; // "name do usuario do github/ nome do repositorio que sera alocado os arquivo-->  usuario/repositorio" //[I-S]LN=2;[I-E]
 //[I-S]LN=3;[I-E]
  @Order(idx = -1) //[I-S]LN=4;[I-E]
  public String path; // "caminho da pasta a pasta /Files/ e a pasta raiz que poderar ser enviado para o github " //[I-S]LN=5;[I-E]
 //[I-S]LN=6;[I-E]
  @Order(idx = 1) //[I-S]LN=7;[I-E]
  public String BranchOrCommitRecovery = "main"; // / branch e uma linha paralela do projeto que muda com o tempo //[I-S]LN=8;[I-E]
  /// CommitRecovery usa o codigo sha para voltar no tempo //[I-S]LN=9;[I-E]
 //[I-S]LN=10;[I-E]
  @Order(idx = 2) //[I-S]LN=11;[I-E]
  public String Commit = "comito"; // "etiqueta que marca o tempo de modificação do arquivo que quanda o sha" //[I-S]LN=12;[I-E]
 //[I-S]LN=13;[I-E]
  @Order(idx = 3) //[I-S]LN=14;[I-E]
  public String token; // "codigo toke do github" //[I-S]LN=15;[I-E]
 //[I-S]LN=16;[I-E]
  private String Dir; //[I-S]LN=17;[I-E]
 //[I-S]LN=18;[I-E]
  private gitClone gitclone = new gitClone(); //[I-S]LN=19;[I-E]
  private gitPush gitpush = new gitPush(); //[I-S]LN=20;[I-E]
  private gitPushMult gitpushmult = new gitPushMult(); //[I-S]LN=21;[I-E]
  private gitCloneMult gitclonemult = new gitCloneMult(); //[I-S]LN=22;[I-E]
 //[I-S]LN=23;[I-E]
  @Order(idx = 0) //[I-S]LN=24;[I-E]
  public PropertiesButton DownLoad = //[I-S]LN=25;[I-E]
      new PropertiesButton( //[I-S]LN=26;[I-E]
          new PropertiesButtonListener() { //[I-S]LN=27;[I-E]
public             void onClicked() { //[I-S]LN=28;[I-E]
              DownLoad(); //[I-S]LN=29;[I-E]
            } //[I-S]LN=30;[I-E]
          }); //[I-S]LN=31;[I-E]
 //[I-S]LN=32;[I-E]
  @Order(idx = 4) //[I-S]LN=33;[I-E]
  public PropertiesButton UpLoad = //[I-S]LN=34;[I-E]
      new PropertiesButton( //[I-S]LN=35;[I-E]
          new PropertiesButtonListener() { //[I-S]LN=36;[I-E]
public             void onClicked() { //[I-S]LN=37;[I-E]
              menssagem(); //[I-S]LN=38;[I-E]
              // UpLoad(); //[I-S]LN=39;[I-E]
            } //[I-S]LN=40;[I-E]
          }); //[I-S]LN=41;[I-E]
           //[I-S]LN=42;[I-E]
  boolean onoff = false; //[I-S]LN=43;[I-E]
  private boolean menssagem() { //[I-S]LN=44;[I-E]
    InputDialog mssg = //[I-S]LN=45;[I-E]
        new InputDialog( //[I-S]LN=46;[I-E]
            "tem centesa que quer envia", //[I-S]LN=47;[I-E]
            "cancel", //[I-S]LN=48;[I-E]
            "enter", //[I-S]LN=49;[I-E]
            new InputDialogListener() { //[I-S]LN=50;[I-E]
              public void onFinish(String t) { //[I-S]LN=51;[I-E]
                Console.log("entro"); //[I-S]LN=52;[I-E]
                onoff = true; //[I-S]LN=53;[I-E]
              } //[I-S]LN=54;[I-E]
 //[I-S]LN=55;[I-E]
              public void onCancel() { //[I-S]LN=56;[I-E]
                onoff = false; //[I-S]LN=57;[I-E]
              }  //[I-S]LN=58;[I-E]
            }); //[I-S]LN=59;[I-E]
    return false; //[I-S]LN=60;[I-E]
  } //[I-S]LN=61;[I-E]
 //[I-S]LN=62;[I-E]
  public void DownLoad() { //[I-S]LN=63;[I-E]
    String DownloadUrl = null; //[I-S]LN=64;[I-E]
    boolean onoffFile = false; //[I-S]LN=65;[I-E]
    if (path.contains(".")) onoffFile = true; //[I-S]LN=66;[I-E]
    if (onoffFile && verifica(false, false)) { //[I-S]LN=67;[I-E]
      if ((BranchOrCommitRecovery == null || BranchOrCommitRecovery.length() < 40) && verifica(false, true)) BranchOrCommitRecovery = "main"; //[I-S]LN=68;[I-E]
      else Console.log("recuperando file no tempo"); //[I-S]LN=69;[I-E]
 //[I-S]LN=70;[I-E]
      DownloadUrl = "https://raw.githubusercontent.com/" + NameGitIsRepository + "/" + BranchOrCommitRecovery + "/Files/" + path; //[I-S]LN=71;[I-E]
      gitclone.GitClone(DownloadUrl, Dir); //[I-S]LN=72;[I-E]
 //[I-S]LN=73;[I-E]
      StringBuilder InforDate = new StringBuilder(); //[I-S]LN=74;[I-E]
      InforDate.append("{\n \"pasth\": \"").append(Dir).append("\",\n \"NameFile\": \"").append(path).append("\",\n \"Link\": \"").append(DownloadUrl).append("\"\n}"); //[I-S]LN=75;[I-E]
      Console.log(InforDate.toString()); //[I-S]LN=76;[I-E]
 //[I-S]LN=77;[I-E]
    } else if (verifica(true, false)) { //[I-S]LN=78;[I-E]
      DownloadUrl = "https://api.github.com/repos/" + NameGitIsRepository + "/contents/Files/" + path + "?ref=main"; //[I-S]LN=79;[I-E]
      File dir = new File(Dir); //[I-S]LN=80;[I-E]
      gitclonemult.gitPasthAll(gitclone, dir, DownloadUrl, token); //[I-S]LN=81;[I-E]
    } //[I-S]LN=82;[I-E]
  } //[I-S]LN=83;[I-E]
 //[I-S]LN=84;[I-E]
  public void UpLoad() { //[I-S]LN=85;[I-E]
    boolean onoffFile = false; //[I-S]LN=86;[I-E]
    if (path.contains(".")) onoffFile = true; //[I-S]LN=87;[I-E]
    if (!verifica(true, true)) return; //[I-S]LN=88;[I-E]
    if (onoffFile) { //[I-S]LN=89;[I-E]
      String API_Url = "https://api.github.com/repos/" + NameGitIsRepository + "/contents/Files/" + path + "?ref=main"; //[I-S]LN=90;[I-E]
      // busca o sha do file //[I-S]LN=91;[I-E]
 //[I-S]LN=92;[I-E]
      String shas = gitpush.getSha(API_Url, token); //[I-S]LN=93;[I-E]
      gitpush.GitPush(API_Url, Commit, Dir, token, shas); //[I-S]LN=94;[I-E]
 //[I-S]LN=95;[I-E]
      Console.log(!shas.isEmpty() ? "update" : "create"); //[I-S]LN=96;[I-E]
      Console.log("Link: " + API_Url); //[I-S]LN=97;[I-E]
    } else { //[I-S]LN=98;[I-E]
      File dir = new File(Dir); //[I-S]LN=99;[I-E]
      if (dir == null || !dir.exists()) return; //[I-S]LN=100;[I-E]
 //[I-S]LN=101;[I-E]
      // "lista todos oa file que existe" //[I-S]LN=102;[I-E]
      gitpushmult.UpVariaPasth(gitpush, dir, dir.getAbsolutePath() + "", NameGitIsRepository, Commit, path, token); //[I-S]LN=103;[I-E]
    } //[I-S]LN=104;[I-E]
  } //[I-S]LN=105;[I-E]
 //[I-S]LN=106;[I-E]
  public boolean verifica(boolean Token, boolean pont) { //[I-S]LN=107;[I-E]
    if (!NameGitIsRepository.contains("/") || NameGitIsRepository.isEmpty()) { //[I-S]LN=108;[I-E]
      Toast.showText("esta errado o link do \"nome do usuario do git\" / nome do repositorio", 1); //[I-S]LN=109;[I-E]
      return false; //[I-S]LN=110;[I-E]
    } //[I-S]LN=111;[I-E]
    if (path == null || path.isEmpty() || (pont && !new File(Directories.getProjectFolder() + "/Files/" + path).exists())) { //[I-S]LN=112;[I-E]
      Toast.showText("caminho para o arquivo esta faltando ou errado", 1); //[I-S]LN=113;[I-E]
      return false; //[I-S]LN=114;[I-E]
    } //[I-S]LN=115;[I-E]
    if (Token && (token == null || token.length() < 20)) { //[I-S]LN=116;[I-E]
      Toast.showText("o toke esta vazio ou faltando", 1); //[I-S]LN=117;[I-E]
      return false; //[I-S]LN=118;[I-E]
    } //[I-S]LN=119;[I-E]
 //[I-S]LN=120;[I-E]
    Dir = Directories.getProjectFolder() + "Files/" + path; //[I-S]LN=121;[I-E]
    return true; //[I-S]LN=122;[I-E]
  } //[I-S]LN=123;[I-E]
} //[I-S]LN=124;[I-E]
//C-R:test
 //[I-S]LN=3;[I-E]
/* @Author Deivison Joel */ //[I-S]LN=4;[I-E]
@PanelInflateMenu("CustomPanels/") //[I-S]LN=5;[I-E]
class test extends ViewPanel { //[I-S]LN=6;[I-E]
 //[I-S]LN=7;[I-E]
  public test() { //[I-S]LN=8;[I-E]
    // Zero-argument constructor is required //[I-S]LN=9;[I-E]
  }  //[I-S]LN=10;[I-E]
 //[I-S]LN=11;[I-E]
  // Runs whenever the panel is attached to a HUB //[I-S]LN=12;[I-E]
  // You should inflate all the views you would like to attach to the panel within this method. //[I-S]LN=13;[I-E]
  public View onAttach() { //[I-S]LN=14;[I-E]
    super.setTittle("git"); //[I-S]LN=15;[I-E]
 //[I-S]LN=16;[I-E]
    // Root layout //[I-S]LN=17;[I-E]
    LinearLayout rootLayout = new ALinearLayout(); //[I-S]LN=18;[I-E]
    rootLayout.setOrientation(LinearLayout.VERTICAL); //[I-S]LN=19;[I-E]
    rootLayout.setBackgroundColor(Color.Android.parseColor("#FFFFFF")); //[I-S]LN=20;[I-E]
    rootLayout.setLayoutParams(new LinearLayout.LayoutParams(ViewGroup.LayoutParams.MATCH_PARENT, ViewGroup.LayoutParams.MATCH_PARENT)); //[I-S]LN=21;[I-E]
    rootLayout.setPadding(24, 24, 24, 24); //[I-S]LN=22;[I-E]
 //[I-S]LN=23;[I-E]
    // "New" button //[I-S]LN=24;[I-E]
    Button newButton = new AButton(); //[I-S]LN=25;[I-E]
    newButton.setText("+ New"); //[I-S]LN=26;[I-E]
    newButton.setAllCaps(false); //[I-S]LN=27;[I-E]
    newButton.setGravity(Gravity.CENTER); //[I-S]LN=28;[I-E]
    LinearLayout.LayoutParams buttonParams = new LinearLayout.LayoutParams(ViewGroup.LayoutParams.WRAP_CONTENT, ViewGroup.LayoutParams.WRAP_CONTENT); //[I-S]LN=29;[I-E]
    buttonParams.gravity = Gravity.START; //[I-S]LN=30;[I-E]
    newButton.setLayoutParams(buttonParams); //[I-S]LN=31;[I-E]
    newButton.setOnClickListener( //[I-S]LN=32;[I-E]
        new View.OnClickListener() { //[I-S]LN=33;[I-E]
          public void onClick(View v) { //[I-S]LN=34;[I-E]
            Toast.showText("Button clicked", Toast.LENGTH_SHORT); //[I-S]LN=35;[I-E]
            Editor.inflateAnchoredFloatingPanelInDP(v, Editor.AnchorSide.Below, new test(), 100, 80); //[I-S]LN=36;[I-E]
          } //[I-S]LN=37;[I-E]
        }); //[I-S]LN=38;[I-E]
         //[I-S]LN=39;[I-E]
    AEditText editText =new  AEditText(); //[I-S]LN=40;[I-E]
    editText.setGravity(Gravity.CENTER); //[I-S]LN=41;[I-E]
    LinearLayout.LayoutParams text =new LinearLayout.LayoutParams( //[I-S]LN=42;[I-E]
            ViewGroup.LayoutParams.MATCH_PARENT, 0, 1 // Fill remaining space vertically //[I-S]LN=43;[I-E]
            ); //[I-S]LN=44;[I-E]
    editText.setLayoutParams(text); //[I-S]LN=45;[I-E]
    // Center text //[I-S]LN=46;[I-E]
    ATextView centerText = new ATextView(); //[I-S]LN=47;[I-E]
    centerText.setText("This is a sample layout"); //[I-S]LN=48;[I-E]
    centerText.setTextColor(Color.Android.BLACK); //[I-S]LN=49;[I-E]
    centerText.setTextSize(16); //[I-S]LN=50;[I-E]
    centerText.setGravity(Gravity.CENTER); //[I-S]LN=51;[I-E]
 //[I-S]LN=52;[I-E]
    LinearLayout.LayoutParams textParams = //[I-S]LN=53;[I-E]
        new LinearLayout.LayoutParams( //[I-S]LN=54;[I-E]
            ViewGroup.LayoutParams.MATCH_PARENT, 0, 1 // Fill remaining space vertically //[I-S]LN=55;[I-E]
            ); //[I-S]LN=56;[I-E]
    centerText.setLayoutParams(textParams); //[I-S]LN=57;[I-E]
 //[I-S]LN=58;[I-E]
    // Add views to root layout //[I-S]LN=59;[I-E]
    rootLayout.addView(newButton); //[I-S]LN=60;[I-E]
    rootLayout.addView(centerText); //[I-S]LN=61;[I-E]
    rootLayout.addView(editText); //[I-S]LN=62;[I-E]
 //[I-S]LN=63;[I-E]
    return rootLayout; //[I-S]LN=64;[I-E]
  } //[I-S]LN=65;[I-E]
 //[I-S]LN=66;[I-E]
  // Run every frame in UI thread doesn't matter if panel is visible or not //[I-S]LN=67;[I-E]
  public void updateUI() {} //[I-S]LN=68;[I-E]
 //[I-S]LN=69;[I-E]
  // Run every frame in UI thread if panel is visible //[I-S]LN=70;[I-E]
  public void updateUIVisible() {} //[I-S]LN=71;[I-E]
 //[I-S]LN=72;[I-E]
  // Run every frame in UI thread if panel is not visible //[I-S]LN=73;[I-E]
  public void minimizedUpdate() {} //[I-S]LN=74;[I-E]
 //[I-S]LN=75;[I-E]
  // Runs whenever the user taps to select the panel from the HUB panel list //[I-S]LN=76;[I-E]
  public void onBindView() {} //[I-S]LN=77;[I-E]
 //[I-S]LN=78;[I-E]
  // Runs whenever the user switches to another panel in the HUB //[I-S]LN=79;[I-E]
  public void onUnbindView() {} //[I-S]LN=80;[I-E]
 //[I-S]LN=81;[I-E]
  // Runs whenever the panel is removed from the HUB //[I-S]LN=82;[I-E]
  // The views will be discarded, you will inflate it again when it is attached to another HUB //[I-S]LN=83;[I-E]
  public void onDetach() {} //[I-S]LN=84;[I-E]
} //[I-S]LN=85;[I-E]
//C-R:playe
class playe extends Component { //[I-S]LN=0;[I-E]
  private Vector2 joy = null, slid = null, slidmouse = null; //[I-S]LN=1;[I-E]
  private Characterbody ch; //[I-S]LN=2;[I-E]
  private float speed = 5f, camx, camy, camrota = 1f; //[I-S]LN=3;[I-E]
  // private SUIText fps; //[I-S]LN=4;[I-E]
  public WorldFile world, menu; //[I-S]LN=5;[I-E]
  private boolean playstop = false; //[I-S]LN=6;[I-E]
 //[I-S]LN=7;[I-E]
public   void start() { //[I-S]LN=8;[I-E]
    ch = myObject.getPhysics().getPhysicsEntity(); //[I-S]LN=9;[I-E]
    joy = Input.getAxisValue("joy"); //[I-S]LN=10;[I-E]
    slid = Input.getAxisValue("slid"); //[I-S]LN=11;[I-E]
    // slidmouse = new Vector2(Input.mouse.getSlideX(), Input.mouse.getSlideY()); //[I-S]LN=12;[I-E]
  } //[I-S]LN=13;[I-E]
 //[I-S]LN=14;[I-E]
public   void repeat() { //[I-S]LN=15;[I-E]
    sairgame(); //[I-S]LN=16;[I-E]
    mudamudo(); //[I-S]LN=17;[I-E]
    if (playstop) return; //[I-S]LN=18;[I-E]
    // fps.setText("FPS: " + (int) (1 / Time.deltatime())); //[I-S]LN=19;[I-E]
    cameMouse(slid); //[I-S]LN=20;[I-E]
move(joy.getX(), joy.getY()); //[I-S]LN=21;[I-E]
  } //[I-S]LN=22;[I-E]
 //[I-S]LN=23;[I-E]
  private void cameMouse(Vector2 slide) { //[I-S]LN=24;[I-E]
camx += slide.getX() * camrota; //[I-S]LN=25;[I-E]
camy = Math.clamp(-90, camy += slide.getY() * camrota, 90); //[I-S]LN=26;[I-E]
    myObject.getRotation().selfLookTo(new Vector3(Math.sin(-camx), 0, Math.cos(-camx))); //[I-S]LN=27;[I-E]
    myObject.findChildObject("see_player").getRotation().selfLookTo(new Vector3(0, Math.sin(-camy), Math.cos(-camy))); //[I-S]LN=28;[I-E]
  } //[I-S]LN=29;[I-E]
 //[I-S]LN=30;[I-E]
  private void move(float x, float y) { //[I-S]LN=31;[I-E]
    ch.setSpeed(-x * speed, y * speed); //[I-S]LN=32;[I-E]
  }  //[I-S]LN=33;[I-E]
 //[I-S]LN=34;[I-E]
  private void sairgame() { //[I-S]LN=35;[I-E]
    if (Input.isKeyDown("sair")) GameController.quit(); //[I-S]LN=36;[I-E]
    if (Input.isKeyDown("playStop")) playstop = !playstop; //[I-S]LN=37;[I-E]
    if (playstop) { //[I-S]LN=38;[I-E]
      Time.setTimeScale(0); //[I-S]LN=39;[I-E]
    } else Time.setTimeScale(1); //[I-S]LN=40;[I-E]
  } //[I-S]LN=41;[I-E]
 //[I-S]LN=42;[I-E]
  private void mudamudo() { //[I-S]LN=43;[I-E]
    if (Input.isKeyDown("reload")) WorldController.loadWorld(world); //[I-S]LN=44;[I-E]
    // if (Input.isKeyDown("menu")) WorldController.loadWorld(menu); //[I-S]LN=45;[I-E]
  } //[I-S]LN=46;[I-E]
} //[I-S]LN=47;[I-E]